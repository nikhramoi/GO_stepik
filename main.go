package main

import "time"

func main() {
	print("Hello, World!\n")
	time.Sleep(3 * time.Second)
}

//go build
//go build -o prog.exe main.go
//GOOS=linux GOARCH=amd64 go build -o prog main.go - компиляция для Linux на Windows
//GOOS=windows GOARCH=amd64 go build -o prog.exe main.go - компиляция для Windows на Linux
//go tool dist list - список поддерживаемых ОС и архитектур
//go run main.go - компиляция и запуск программы
//go install - компиляция и установка программы в $GOPATH/bin или $GOBIN
//go clean - удаление скомпилированных файлов
//go clean -cache - очистка кэша сборки
//go clean -modcache - очистка кэша модулей
//go clean -i - удаление установленных пакетов
//go clean -testcache - очистка кэша тестов
//go mod init <module_name> - инициализация нового модуля
//go mod tidy - добавление недостающих и удаление неиспользуемых зависимостей
//go mod download - загрузка всех зависимостей, указанных в go.mod
//go mod verify - проверка целостности загруженных модулей
//go get <package>@<version> - добавление или обновление зависимости до указанной версии
//go get <package> - добавление или обновление зависимости до последней версии
//go list -m all - вывод всех зависимостей модуля
//go list -json -m all - вывод всех зависимостей модуля в формате JSON
//go list -f '{{.ImportPath}}' <package> - вывод пути импорта указанного пакета
//go doc <package> - просмотр документации по пакету
//go doc <package>.<symbol> - просмотр документации по символу в пакете
//go test - запуск тестов в текущем пакете
//go test ./... - запуск тестов во всех пакетах модуля
//go test -v - запуск тестов с подробным выводом
//go test -cover - запуск тестов с измерением покрытия кода
//go test -run <pattern> - запуск тестов, имя которых соответствует шаблону
//go test -bench . - запуск всех бенчмарков в текущем пакете
//go test -bench <pattern> - запуск бенчмарков, имя которых соответствует шаблону
//go test -benchmem - запуск бенчмарков с измерением использования памяти
//go test -count <n> - запуск тестов n раз
//go test -timeout <duration> - установка таймаута для тестов
//go test -short - запуск сокращенных тестов
//go test -failfast - остановка при первом сбое теста
//go test -json - вывод результатов тестов в формате JSON
//go test -list <pattern> - вывод имен тестов, соответствующих шаблону
//go test -c - компиляция тестов в исполняемый файл
//go test -i - установка зависимостей для тестов
//go test -mod <mode> - установка режима работы с модулями (readonly, vendor, mod)
//go test -vet <mode> - включение или отключение проверки кода (off, all, <list_of_checks>)
//go test -exec <command> - запуск тестов с использованием указанной команды
//go test -coverprofile <file> - сохранение профиля покрытия в файл
//go test -covermode <mode> - установка режима измерения покрытия (set, count, atomic)
//go test -cpuprofile <file> - сохранение профиля CPU в файл
//go test -memprofile <file> - сохранение профиля памяти в файл
//go test -blockprofile <file> - сохранение профиля блокировок в файл
//go test -mutexprofile <file> - сохранение профиля мьютексов в файл
//go test -trace <file> - сохранение трассировки выполнения в файл
//go test -tags <tag_list> - установка тегов сборки для тестов
//go test -coverpkg <package_list> - указание пакетов для измерения покрытия
//go test -json -cover - запуск тестов с измерением покрытия и выводом в формате JSON
//go test -run <pattern> -bench <pattern> - запуск тестов и бенчмарков, имена которых соответствуют шаблону
//go test -v -cover - запуск тестов с подробным выводом и измерением покрытия
//go test -timeout <duration> -run <pattern> - запуск тестов с таймаутом и именами, соответствующими шаблону
//go test -bench . -benchmem - запуск всех бенчмарков с измерением использования памяти
//go test -count <n> -run <pattern> - запуск тестов n раз с именами, соответствующими шаблону
//go test -failfast -v - запуск тестов с остановкой при первом сбое и подробным выводом
//go test -json -run <pattern> - запуск тестов с именами, соответствующими шаблону, и выводом в формате JSON
//go test -coverprofile <file> -run <pattern> - сохранение профиля покрытия в файл для тестов, имена которых соответствуют шаблону
//go test -cpuprofile <file> -bench <pattern> - сохранение профиля CPU в файл для бенчмарков, имена которых соответствуют шаблону
//go test -memprofile <file> -bench <pattern> - сохранение профиля памяти в файл для бенчмарков, имена которых соответствуют шаблону
//go test -blockprofile <file> -bench <pattern> - сохранение профиля блокировок в файл для бенчмарков, имена которых соответствуют шаблону
//go test -mutexprofile <file> -bench <pattern> - сохранение профиля мьютексов в файл для бенчмарков, имена которых соответствуют шаблону
//go test -trace <file> -run <pattern> - сохранение трассировки выполнения в файл для тестов, имена которых соответствуют шаблону
//go test -tags <tag_list> -run <pattern> - установка тегов сборки и запуск тестов с именами, соответствующими шаблону
//go test -coverpkg <package_list> -run <pattern> - указание пакетов для измерения покрытия и запуск тестов с именами, соответствующими шаблону
//go test -mod <mode> -run <pattern> - установка режима работы с модулями и запуск тестов с именами, соответствующими шаблону
//go test -vet <mode> -run <pattern> - включение или отключение проверки кода и запуск тестов с именами, соответствующими шаблону
//go test -exec <command> -run <pattern> - запуск тестов с использованием указанной команды и именами, соответствующими шаблону
//go test -i -run <pattern> - установка зависимостей для тестов и запуск тестов с именами, соответствующими шаблону
//go test -c -o <file> - компиляция тестов в исполняемый файл с указанным именем
//go test -list <pattern> -run <pattern> - вывод имен тестов, соответствующих шаблону, и запуск тестов с именами, соответствующими шаблону
//go test -short -run <pattern> - запуск сокращенных тестов с именами, соответствующими шаблону
//go test -timeout <duration> -bench <pattern> - запуск бенчмарков с таймаутом и именами, соответствующими шаблону
//go test -failfast -bench <pattern> - запуск бенчмарков с остановкой при первом сбое и именами, соответствующими шаблону
//go test -json -bench <pattern> - запуск бенчмарков с именами, соответствующими шаблону, и выводом в формате JSON
//go test -coverprofile <file> -bench <pattern> - сохранение профиля покрытия в файл для бенчмарков, имена которых соответствуют шаблону
//go test -cpuprofile <file> -run <pattern> - сохранение профиля CPU в файл для тестов, имена которых соответствуют шаблону
//go test -memprofile <file> -run <pattern> - сохранение профиля памяти в файл для тестов, имена которых соответствуют шаблону
//go test -blockprofile <file> -run <pattern> - сохранение профиля блокировок в файл для тестов, имена которых соответствуют шаблону
